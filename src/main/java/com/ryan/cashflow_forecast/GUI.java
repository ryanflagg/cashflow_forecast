/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.ryan.cashflow_forecast;
import java.util.ArrayList;
import java.util.Date;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ryanf
 */
public class GUI extends javax.swing.JFrame {

    Forecast forecast;
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        type = new javax.swing.ButtonGroup();
        frequency = new javax.swing.ButtonGroup();
        newTransaction = new javax.swing.JButton();
        name = new javax.swing.JTextField();
        income = new javax.swing.JRadioButton();
        expenditure = new javax.swing.JRadioButton();
        nameLabel = new javax.swing.JLabel();
        amount = new javax.swing.JTextField();
        amountLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        transTable = new javax.swing.JTable();
        deleteTrans = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        weekly = new javax.swing.JRadioButton();
        monthly = new javax.swing.JRadioButton();
        quarterly = new javax.swing.JRadioButton();
        annually = new javax.swing.JRadioButton();
        monthBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        forecastTable = new javax.swing.JTable();
        chartPane = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newForecast1 = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        load = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        newTransaction.setText("Add Transaction");
        newTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newTransactionActionPerformed(evt);
            }
        });

        type.add(income);
        income.setText("Income");

        type.add(expenditure);
        expenditure.setText("Expenditure");
        expenditure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expenditureActionPerformed(evt);
            }
        });

        nameLabel.setText("Description");

        amountLabel.setText("Amount");

        transTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Number", "Name", "Type", "Amount", "Frequency"
            }
        ));
        jScrollPane2.setViewportView(transTable);

        deleteTrans.setText("Delete Transaction");
        deleteTrans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteTransActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        frequency.add(weekly);
        weekly.setText("Weekly");

        frequency.add(monthly);
        monthly.setText("Monthly");

        frequency.add(quarterly);
        quarterly.setText("Quarterly");

        frequency.add(annually);
        annually.setText("Annually");

        ArrayList<String> months = Month.getMonths();
        monthBox.setModel(new javax.swing.DefaultComboBoxModel<>(months.toArray(new String[0])));

        ArrayList orderedMonths = Month.monthSorter();
        forecastTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null}
            },

            orderedMonths.toArray(new String [0])
        ));
        jScrollPane1.setViewportView(forecastTable);

        javax.swing.GroupLayout chartPaneLayout = new javax.swing.GroupLayout(chartPane);
        chartPane.setLayout(chartPaneLayout);
        chartPaneLayout.setHorizontalGroup(
            chartPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        chartPaneLayout.setVerticalGroup(
            chartPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 156, Short.MAX_VALUE)
        );

        jMenu1.setText("File");

        newForecast1.setText("New");
        newForecast1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newForecast1ActionPerformed(evt);
            }
        });
        jMenu1.add(newForecast1);

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        jMenu1.add(save);

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });
        jMenu1.add(load);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(amountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(amount)
                                            .addComponent(name)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(income, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(expenditure))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(weekly, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(monthly, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(quarterly, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(annually, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(newTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(updateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(489, 489, 489)
                                .addComponent(deleteTrans, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(chartPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteTrans)
                            .addComponent(updateButton)
                            .addComponent(newTransaction)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(income)
                            .addComponent(expenditure))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weekly)
                            .addComponent(monthly)
                            .addComponent(quarterly)
                            .addComponent(annually))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(amount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(amountLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(monthBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(chartPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void expenditureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expenditureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expenditureActionPerformed

    private void newTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newTransactionActionPerformed
        // TODO add your handling code here:
        
        int index = this.forecast.transactionIndex();
        
        String textName = name.getText();
        String amt = amount.getText();
        float fAmt = Float.parseFloat(amt);
        String typeSelection;
        String freq = "";
        
        if(income.isSelected()){
            typeSelection = income.getText();
        }else{
            typeSelection = expenditure.getText();
        }
        
        if (weekly.isSelected()){
            freq = "weekly";
        }
        else if(monthly.isSelected()){
            freq = "monthly";
        }
        else if(annually.isSelected()){
            freq = "annually";
        }
        else if(quarterly.isSelected()){
            freq = "quarterly";
        }
       
        int date = monthBox.getSelectedIndex() + 1;
        
        showMessageDialog(null, "description = " + textName);
        showMessageDialog(null, "Amount = " + fAmt);
        showMessageDialog(null, "type = " + typeSelection);
        showMessageDialog(null, "freq = " + freq);
        showMessageDialog(null, "month = " + date);
        
        
        Transaction t = new Transaction(index, date, freq, fAmt, textName, typeSelection);
        
        this.forecast.addTransaction(t);
        
        DefaultTableModel transModel = (DefaultTableModel) transTable.getModel();
        transModel.addRow(new Object[]{index, textName, typeSelection, fAmt, freq});
    }//GEN-LAST:event_newTransactionActionPerformed

    private void deleteTransActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteTransActionPerformed
        // TODO add your handling code here:
        int row = this.transTable.getSelectedRow();
        int column =0;
        String value = this.transTable.getModel().getValueAt(row, column).toString();
        int index = Integer.parseInt(value);
        this.forecast.deleteTransaction(index);
        this.forecast.reIndexTrans();
        this.updateTransTable();
        this.updateForecast();
    }//GEN-LAST:event_deleteTransActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
               
        this.updateForecast();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Persistence percy = new Persistence();
        
        ArrayList<Transaction> transList = this.forecast.getTransactions();
        percy.saveState(transList);
        // TODO add your handling code here:
    }//GEN-LAST:event_saveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        Persistence percy = new Persistence();
        ArrayList<Transaction> transList = percy.loadState();
        this.forecast.setTransactions(transList);
        this.loadTransTable();
        this.updateForecast();

    }//GEN-LAST:event_loadActionPerformed

    private void newForecast1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newForecast1ActionPerformed
        // TODO add your handling code here:
        this.newForecast();
    }//GEN-LAST:event_newForecast1ActionPerformed
    
    private void updateForecast(){
        this.forecast.createForecast();
        forecastTable.getModel();
        showMessageDialog(null, "income = "  + this.forecast.income);
        showMessageDialog(null, "exp = "  + this.forecast.expenditure);
        showMessageDialog(null, "surplus = "  + this.forecast.surplus);
        
        try{
            // update the income rows in table
            forecastTable.setValueAt("Income", 0, 0);
            for (int i = 0; i < 12; i++){
                float incVal = this.forecast.income.get(i);
                forecastTable.setValueAt(incVal, 0, i + 1);
            }
        
            // update the expenditure rows
            forecastTable.setValueAt("Expenditure", 1, 0);
            for (int i = 0; i < 12; i++){
                float expVal = this.forecast.expenditure.get(i);
                forecastTable.setValueAt(expVal, 1, i + 1);
            }
        
            // update the surplurs rows
            forecastTable.setValueAt("Surplus", 3, 0);
            for (int i = 0; i < 12; i++){
                float surplusVal = this.forecast.surplus.get(i);
                forecastTable.setValueAt(surplusVal, 3, i + 1);
        }
        }
        catch(Exception e){
                
            showMessageDialog(null, "There was an error updating the cashflow forecast view!");
                    
        }
            
        
    }
    
    private void updateTransTable(){
        int numRows = this.transTable.getRowCount();

        // Clear the table
        DefaultTableModel transModel = (DefaultTableModel) transTable.getModel();
        transModel.setRowCount(0);
        
        

        for (int i = 0; i < numRows; i++){
            // get object variables  
            
            int index = i;
            String textName = this.forecast.getTransactions().get(i).getName();
            String typeSelection = this.forecast.getTransactions().get(i).getType();
            float amt = this.forecast.getTransactions().get(i).getAmount();
            //int month = this.forecast.getTransactions().get(i).getNext();
            String freq = this.forecast.getTransactions().get(i).getFreq();
            
            
            // update table
            transTable.getModel();
            transModel.addRow(new Object[]{index, textName, typeSelection, amt, freq});
        }
    }
    
    private void loadTransTable(){
        int numRows = this.forecast.transactions.size();

        // Clear the table
        DefaultTableModel transModel = (DefaultTableModel) transTable.getModel();
        transModel.setRowCount(0);
           
        for (int i = 0; i < numRows; i++){
            // get object variables  
            
            int index = i;
            String textName = this.forecast.getTransactions().get(i).getName();
            String typeSelection = this.forecast.getTransactions().get(i).getType();
            float amt = this.forecast.getTransactions().get(i).getAmount();
            //int month = this.forecast.getTransactions().get(i).getNext();
            String freq = this.forecast.getTransactions().get(i).getFreq();
            
            // update table
            transTable.getModel();
            transModel.addRow(new Object[]{index, textName, typeSelection, amt, freq});
        }
    }
    
    private void newForecast(){
        this.forecast = new Forecast();
        this.forecast.transactions.clear();
        this.updateTransTable();
        this.updateForecast();
    
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
                
            }
            
            
        });
        //this.newForecast();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField amount;
    private javax.swing.JLabel amountLabel;
    private javax.swing.JRadioButton annually;
    private javax.swing.JPanel chartPane;
    private javax.swing.JButton deleteTrans;
    private javax.swing.JRadioButton expenditure;
    private javax.swing.JTable forecastTable;
    private javax.swing.ButtonGroup frequency;
    private javax.swing.JRadioButton income;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenuItem load;
    private javax.swing.JComboBox<String> monthBox;
    private javax.swing.JRadioButton monthly;
    private javax.swing.JTextField name;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JMenuItem newForecast1;
    private javax.swing.JButton newTransaction;
    private javax.swing.JRadioButton quarterly;
    private javax.swing.JMenuItem save;
    private javax.swing.JTable transTable;
    private javax.swing.ButtonGroup type;
    private javax.swing.JButton updateButton;
    private javax.swing.JRadioButton weekly;
    // End of variables declaration//GEN-END:variables
}
